{"id":424,"date":"2020-05-19T02:14:12","date_gmt":"2020-05-19T02:14:12","guid":{"rendered":"https:\/\/www.argon40.com.br\/learn\/?p=424"},"modified":"2020-08-10T05:54:12","modified_gmt":"2020-08-10T05:54:12","slug":"building-a-robot-buggy-pi","status":"publish","type":"post","link":"https:\/\/www.argon40.com.br\/learn\/index.php\/2020\/05\/19\/building-a-robot-buggy-pi\/","title":{"rendered":"Building a Robot Buggy Pi"},"content":{"rendered":"\n<p>One of the simplest classic projects a maker can spend their time on is building a robot buggy with the Raspberry Pi. If somebody told me I could build robots with the Raspberry Pi, I would have gotten into it sooner! This article will show you how you can build a robot buggy and program it to move around under your control with simple Python commands!<\/p>\n\n\n\n<p>Materials needed:<\/p>\n\n\n\n<ul><li>Raspberry Pi 3<\/li><li>Motor controller board<\/li><li>2 \u00d7 3V &#8211; 6V DC motors<\/li><li>2 \u00d7 wheels<\/li><li>1 \u00d7 AA battery holder (for 4 AA batteries)<\/li><li>4 \u00d7 AA batteries<\/li><li>Ball caster<\/li><li>Wire or jumper leads<\/li><li>A USB Battery pack<\/li><li>Screwdriver<\/li><li>Soldering iron and solder<\/li><li>Wire strippers<\/li><li>Small cardboard or plastic box and glue\/tape<\/li><\/ul>\n\n\n\n<p>Optional materials:<\/p>\n\n\n\n<ul><li>Breadboard<\/li><li>VL53L0X time-of-flight range finder or ultrasonic distance sensor<\/li><li>2 \u00d7 line following sensors<\/li><li>18650 battery, battery clip, USB charge\/discharge board (or USB power bank)<\/li><\/ul>\n\n\n\n<p>Software:<\/p>\n\n\n\n<ul><li>The latest version of Raspbian<\/li><\/ul>\n\n\n\n<p>Additional Extras:<\/p>\n\n\n\n<ul><li>Small cardboard box<\/li><li>Adhesives (duct tape\/putty\/glue)<\/li><\/ul>\n\n\n\n<p><strong>Assembling your motors and board<\/strong><\/p>\n\n\n\n<p>The first step to building your robot buggy pi is connecting the motor controller to the Raspberry Pi, the battery pack, and your two motors. This will test if your components are all working properly. For this project, we will be using the L298N Dual H Bridge DC Stepper Motor Driver Controller board. Don\u2019t worry if you don\u2019t have the exact model that will be used in this article, because these instructions will be applicable to most motor controller boards. You can check your board\u2019s documentation if you are using a different model.<\/p>\n\n\n\n<p><strong>Soldering wires to your motors<\/strong><\/p>\n\n\n\n<p>If you have managed to buy motors that have wires, you can skip this part! However, most motors on the market do not have wires attached to them so you will need to solder them on yourself.<\/p>\n\n\n\n<ol type=\"1\"><li>Strip the ends of your wires to reveal the metal core<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/strip-wire.jpg\" alt=\"strip wires\"\/><\/figure>\n\n\n\n<ul><li>For easier soldering, take the plastic clip off from your motor (you can use a screwdriver for this).<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/motor-remove-clip.jpg\" alt=\"remove clip\"\/><\/figure>\n\n\n\n<ul><li>Solder your wires to the terminals of your motor and reattach the plastic clips you removed earlier.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/solder-motor.gif\" alt=\"solder wires\"\/><\/figure>\n\n\n\n<ul><li>In order to ensure that the wires do not touch the motor\u2019s metal casing, trim them off. You may also wrap the ends of your motors with tape for durability.<\/li><\/ul>\n\n\n\n<p><strong>Connecting the Motors to the Board<\/strong><\/p>\n\n\n\n<p>Ready your small screwdriver to connect your motors to your board.<\/p>\n\n\n\n<ol type=\"1\"><li>Proceed to loosen the screws in terminal blocks OUT1, OUT2, OUT3, and OUT4. If your terminal blocks are labeled differently, consult the documentation for your board.<\/li><li>Strip the ends of the wires and insert the stripped ends into the terminal blocks. If needed, you may cut off the male\/female ends.<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/wires-in-board.jpg\" alt=\"inserted wires\"\/><\/figure>\n\n\n\n<ul><li>Tighten the screws to the terminal blocks to ensure that the wires stay in place.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/wire-in-block.jpg\" alt=\"terminal block\"\/><\/figure>\n\n\n\n<p><strong>Powering the Motors<\/strong><\/p>\n\n\n\n<p>The raspberry Pi alone will not be able to supply enough power for your motors. This is where your AA batteries come in!<\/p>\n\n\n\n<ol type=\"1\"><li>Grab your screwdriver and loosen the screws for terminal blocks VCC, GND, and 5V.<\/li><li>With your AA battery holder in-hand, insert the red wire into terminal block VCC and the black wire into terminal block GND (these are not interchangeable).<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/battery-holder.jpg\" alt=\"battery holder\"\/><\/figure>\n\n\n\n<ul><li>Once again, tighten the screws to ensure that your wires stay in place.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/battery-terminals.jpg\" alt=\"battery terminals\"\/><\/figure>\n\n\n\n<p><strong>Connecting the Board to your Raspberry Pi<\/strong><\/p>\n\n\n\n<p>You will need to wire the board to the Raspberry Pi for this project to work. There are boards that will require you to follow a different procedure for connecting, and there are boards that act as a hat that you can simply place onto the Raspberry Pi GPIO pins. You may check your board\u2019s documentation if you are not using a different board than the one being used in this article.<\/p>\n\n\n\n<p>For our board, we will be utilizing pins labeled In1, In2, In3, and In4 as well as the two GND pins. The GPIO pins that you will be using on your Raspberry Pi is completely up to you! In this article, we will be using GPIO 7, 8, 9, and 10.<\/p>\n\n\n\n<ol type=\"1\"><li>Grab the five female-to-female jumper leads and connect your preferred Raspberry Pi GPIO pins to the motor controller board pins. If the board you\u2019re using does not have a GND pin, you may strip the end of a female-to-female and insert it into terminal block GND that supplies your battery pack. Make sure it\u2019s secure!<\/li><\/ol>\n\n\n\n<p>The connections are as follows:<\/p>\n\n\n\n<p>7 \u2013 In1<\/p>\n\n\n\n<p>8 \u2013 In2<\/p>\n\n\n\n<p>9 \u2013 In3<\/p>\n\n\n\n<p>10 \u2013 In4<\/p>\n\n\n\n<p>GND \u2013 GND<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/gpio-board.jpg\" alt=\"GPIO to board\"\/><\/figure>\n\n\n\n<p><strong>Configuring Directions<\/strong><\/p>\n\n\n\n<p>It is time to assign a direction to your motors! To configure your left and right motors, you will need to know which way they go forward and which way they go backwards.<\/p>\n\n\n\n<ol type=\"1\"><li>Pick one of your motors and use a marker pen to label it \u2018right.\u2019 You will want to draw an arrow to configure which way it will go forward. Repeat this process with your other motor but label it \u2018left.\u2019<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/motors_labelled.jpg\" alt=\"labeled motors\"\/><\/figure>\n\n\n\n<ul><li>Open <strong>mu<\/strong> (this can be found in the Raspberry Pi programming menu), and type<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">from gpiozero import Robot\nrobby = Robot(left=(7,8), right=(9,10))<\/pre>\n\n\n\n<p><br>in order to import the Robot class and create a Robot project. \u2018Robby\u2019 stands for the robot\u2019s name, but you can name it whatever you want to name it!<\/p>\n\n\n\n<ul><li>Save the file as \u2018robby.py\u2019 or whatever you decided to name your robot.<\/li><li>Click <strong>Run<\/strong>!<\/li><li>Now open a python shell (do this by clicking the terminal icon located in the taskbar, which is at the top of the screen), type \u2018python,\u2019 and press <strong>Enter<\/strong>.<\/li><li>Type<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">robby.forward()<\/pre>\n\n\n\n<p>to find out which way the motors turn. If you wish to stop them, type<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">robot.stop()<\/pre>\n\n\n\n<ul><li>This next step will allow you to determine which motor is left and right. Type<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">robby.forward(0.4)<br>robby.right(0.4)<\/pre>\n\n\n\n<p> to do this (the 0.4 will make the motor go slower than usual, and make      it easier for you to see which way they turn). The motor that changes direction is the right-hand motor.<\/p>\n\n\n\n<ul><li>If you guessed correctly and right-hand motor is indeed the motor you labeled \u2018right,\u2019 then you do not have to changed anything. However, if the right-hand motor is the one you labeled \u2018left,\u2019 then you will need to change your Robot object in your file to swap the left and right pin numbers:<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">## e.g. change<br>robby = Robot(left=(7,8), right=(9,10))<\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">## to<br>robby = Robot(left=(9,10), right=(7,8))<\/pre>\n\n\n\n<ul><li>We will now proceed to check if you have the forward and backward movements set up correctly. Again, drive both of your motors forward with robby.forward(0.4) and check if both motors are turning as follows:<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/motor-test.gif\" alt=\"direction of motors\"\/><\/figure>\n\n\n\n<p>If the right-hand motor isn\u2019t turning as shown, you will have make another change.<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/motor_direction.png\" alt=\"\"\/><\/figure>\n\n\n\n<pre class=\"wp-block-preformatted\">## e.g. change<br>robby = Robot(left=(9,10), right=(7,8))<\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">## to<br>robby = Robot(left=(9,10), right=(8,7))<\/pre>\n\n\n\n<p>If the left-hand motor is turning in the wrong direction, however, do the same but replace the right-hand pin numbers with the left-hand pin numbers.<\/p>\n\n\n\n<p><strong>Assembling the robot<\/strong><\/p>\n\n\n\n<p>Keep in mind that you do not have to follow these directions if you wish for your robot body to look differently. However, keep in mind that:<\/p>\n\n\n\n<ul><li>The body needs to be big enough for the Raspberry Pi, the motor controller, and the batteries to fit into.<\/li><li>The body needs to be able to accommodate mounting the wheels.<\/li><\/ul>\n\n\n\n<p>The Raspberry Pi website recommends that you build a prototype chassis first in order to grasp a feel of what an appropriate robot body is. You can then learn to make better bodies with laser-cutting or 3D printing! This article, however, will utilize a cardboard box for now.<\/p>\n\n\n\n<ol type=\"1\"><li>Place your motors into the box, preferably arranged in the way you want them to stay in permanently. Mark where you want the motors\u2019 axle to pass through\u2014and make sure your wheels have enough room to spin around!<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-0.jpg\" alt=\"chassis-1\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-1.jpg\" alt=\"chassis-2\"\/><\/figure>\n\n\n\n<ul><li>Poke holes through the sides of the box where you will fit the motors\u2019 axles into.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-2.jpg\" alt=\"chassis-3\"\/><\/figure>\n\n\n\n<ul><li>To make sure the motors are held in place, use an adhesive putty or tape to secure them.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-3.jpg\" alt=\"chassis-4\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-4.jpg\" alt=\"chassis-5\"\/><\/figure>\n\n\n\n<ul><li>When you are content with the motor placement, proceed to attach the wheels to the axles.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-5.jpg\" alt=\"chassis-6\"\/><\/figure>\n\n\n\n<ul><li>Once you have attached the wheels, you can screw a ball caster at the front section as a third wheel!<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-6.jpg\" alt=\"chassis-7\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-7.jpg\" alt=\"\"\/><\/figure>\n\n\n\n<ul><li>You can use a power bank to power up your Raspberry Pi!<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https:\/\/projects-static.raspberrypi.org\/projects\/build-a-buggy\/2919a77a9ddf6a074d94c87ab7bfa8fea0b12337\/en\/images\/chassis-8.jpg\" alt=\"chassis-8\"\/><\/figure>\n\n\n\n<p>Enjoy your Robot Buggy Pi!<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><em>All images were taken from <a href=\"https:\/\/www.raspberrypi.org\/\">https:\/\/www.raspberrypi.org\/<\/a><\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>One of the simplest classic projects a maker can spend their time on is building a robot buggy with the Raspberry Pi. If somebody told me I could build robots with the Raspberry Pi, I would have gotten into it sooner! This article will show you how you can build a robot buggy and program [&hellip;]<\/p>\n","protected":false},"author":5,"featured_media":432,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[4,8,1],"tags":[],"_links":{"self":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts\/424"}],"collection":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/comments?post=424"}],"version-history":[{"count":1,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts\/424\/revisions"}],"predecessor-version":[{"id":425,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts\/424\/revisions\/425"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/media\/432"}],"wp:attachment":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/media?parent=424"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/categories?post=424"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/tags?post=424"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}