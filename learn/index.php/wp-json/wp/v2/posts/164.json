{"id":164,"date":"2020-03-06T05:03:15","date_gmt":"2020-03-06T05:03:15","guid":{"rendered":"http:\/\/argon40.com.br\/learn\/?p=164"},"modified":"2020-05-05T19:13:40","modified_gmt":"2020-05-05T19:13:40","slug":"a-comprehensive-guide-on-raspberry-pi-3-and-raspberry-pi-zero-and-zero-w-gpio-pinout","status":"publish","type":"post","link":"https:\/\/www.argon40.com.br\/learn\/index.php\/2020\/03\/06\/a-comprehensive-guide-on-raspberry-pi-3-and-raspberry-pi-zero-and-zero-w-gpio-pinout\/","title":{"rendered":"Raspberry Pi 3 &#038; 4 and Raspberry Pi Zero and Zero W GPIO Pinout Guide"},"content":{"rendered":"\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"227\" height=\"660\" src=\"http:\/\/argon40.com.br\/learn\/wp-content\/uploads\/2020\/03\/image-31.png\" alt=\"\" class=\"wp-image-170\" srcset=\"https:\/\/www.argon40.com.br\/learn\/wp-content\/uploads\/2020\/03\/image-31.png 227w, https:\/\/www.argon40.com.br\/learn\/wp-content\/uploads\/2020\/03\/image-31-103x300.png 103w\" sizes=\"(max-width: 227px) 100vw, 227px\" \/><\/figure><\/div>\n\n\n\n<p>GPIOs (General-Purpose Input\/Output) are generic pins controllable by a user in execution time. You can program these pins to interact with the real world\u2014from turning an LED on and off to commanding microcontrollers such as the Arduino. In short, GPIO enables you to do <a href=\"https:\/\/en.wikipedia.org\/wiki\/Physical_computing\">physical computing<\/a>. Raspberry Pi single-board computers have their own set of GPIO headers, but this article is going to focus on the 40-pin connector of the newer models: <strong>Raspberry Pi 3<\/strong> and <strong>Raspberry Pi Zero\/Zero W<\/strong>.<\/p>\n\n\n\n<p>Let&#8217;s start by looking at the figure on the left. You can see that the pins are color-coded.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"300\" height=\"50\" src=\"http:\/\/argon40.com.br\/learn\/wp-content\/uploads\/2020\/03\/image-32.png\" alt=\"\" class=\"wp-image-171\"\/><\/figure><\/div>\n\n\n\n<p>These pins, when used with other peripheral devices such as servos, relays,\nsensors etc., make a powerful tool for controlling the outside world. They will\nhelp you become the <em>&#8220;MASTER&#8221;<\/em> of physical computing, like\nturning on\/off that lamp a few feet away from you.<\/p>\n\n\n\n<h6>POWER Pins<\/h6>\n\n\n\n<p>POWER Pins pull power directly from the Raspberry Pi. You can use them to\npower other devices connected to your Raspberry Pi.<\/p>\n\n\n\n<p>To put it out there, the 5V pins (Pins 2 and 4) are directly connected to\nthe <code>5V0<\/code> rail (power supply) <sup><a href=\"#note2\">1<\/a><\/sup>. This means that you\ncan, <em>in theory<\/em>, power the raspberry pi via one of these pins. But of\ncourse that&#8217;s all in theory where everything is round, and frictionless, <code>pV = nRT<\/code> etc., powering the raspberry pi\nhere also means that your raspberry pi is unprotected and prone voltage and\ncurrent surges. If you are really that desperate to power you raspberry pi with\nthis method, try reading this <a href=\"http:\/\/www.raspberry-pi-geek.com\/Archive\/2013\/01\/Adding-an-On-Off-switch-to-your-Raspberry-Pi\/\">tutorial<\/a>\non how to make a full on power switch via the GPIO.<\/p>\n\n\n\n<h6>GROUND Pins<\/h6>\n\n\n\n<p>GROUND are the pins you use to ground your devices. It doesn\u2019t matter which\npin you use as they are all connected to the same line.<\/p>\n\n\n\n<h6>GPIO Pins<\/h6>\n\n\n\n<p>GPIO Pins (General Purpose Input\/Output) are the standard pins used to turn\ndevices on and off. Think of them as switches that you can program to turn on\nor off depending on your set conditions. They can also be used as buttons if\nyou program them to &#8220;signal&#8221; you when they are shorted to ground. You\ncan do these things via the RPi.GPIO or GPIOZero modules in Python.<\/p>\n\n\n\n<p>We recommend the GPIOZero for its simplicity and <em>zero boilerplate\nphilosophy<\/em> (which means you can focus on the logic of your programs rather\nthan on the lines of code you don&#8217;t need to understand anyway). GPIOZero also\nmakes programming buttons and LEDs easier to implement since this magnificent\nmodule already takes care of all the boilerplate codes. In addition to that,\nthey also have very good <a href=\"https:\/\/gpiozero.readthedocs.io\/en\/stable\/\">documentation<\/a>.<\/p>\n\n\n\n<h3>Interfaces<\/h3>\n\n\n\n<p>When talking about physical computing, you can&#8217;t leave out sensors and\nmicrocontrollers. If your set up is a body, your Raspberry Pi is the brain\n(&#8220;master&#8221;) and these peripherals like sensors and microcontrollers\n(&#8220;slaves&#8221;) are your eyes, nose, skin, arms, feet, etc. There are a\nlot of things that you can do with your Raspberry Pi alone, but there are\ninstances you need special devices that can detect temperature, and pressure.\nSometimes, you will even opt to avail microcontrollers. The following pins are\nyour Raspberry Pi&#8217;s way of communicating with these devices.<\/p>\n\n\n\n<h6>UART Pins<\/h6>\n\n\n\n<p>Let&#8217;s start with the classic UART (Universal Asynchronous\nReceiver\/Transmitter). Serial communication is the process of sending data one\nbit at a time, sequentially, over a communication channel or computer bus.<\/p>\n\n\n\n<p>In Raspbian, the UART is, by default, used as connection for Raspbian&#8217;s\nterminal. This is particularly useful if you want to access your Raspberry Pi&#8217;s\nterminal on a PC but can&#8217;t connect via SSH (<em>e.g.<\/em> you don&#8217;t have\nnetwork\/internet connection). You can follow this <a href=\"http:\/\/workshop.raspberrypiaustralia.com\/usb\/ttl\/connecting\/2014\/08\/31\/01-connecting-to-raspberry-pi-via-usb\/\">tutorial<\/a>\nto access your Raspberry Pi&#8217;s terminal using your pc. Of course, the UART is not\nlimited to this application. For <a href=\"http:\/\/www.instructables.com\/id\/Connect-the-Raspberry-Pi-to-network-using-UART\/\">example<\/a>:\nyou can use these pins to connect to a network by plugging it in a PC connected\nto the internet.<\/p>\n\n\n\n<p>The default baud rate (bits per second) of the Raspberry Pi is 115200. That\nmeans the UART can pass data 115200 bits per second or, for all of you math\ngeniuses out there, 115.2 kbps. It might be a little slow, but it&#8217;s fast enough\nfor most of your projects. You can try to overclock (which means editing the\nmaximum baud rate) this limitation but it may lead to poor data integrity.\nAlso, you can also only control one UART device when using the Raspberry Pi&#8217;s\nGPIO header. You need one connection for transmitting and one connection for\nreceiving data (which means a total of two connections for each device). Pin eight\n(8) is for transmitting while Pin ten (10) is for receiving data. Since the\nRaspberry Pi only has these two, it means you can only control one UART device.\nShift to the SPI or I2C enabled devices if you need more.<\/p>\n\n\n\n<h6>SPI Pins<\/h6>\n\n\n\n<p>SPI or Serial Peripheral Interface is another interface that allows multiple\ncontrol of slaves as long as you have multiple chip select connections. With\nrespect to Raspberry Pi&#8217;s GPIO header &#8211; by &#8220;multiple&#8221;, <em>I mean\ntwo.<\/em> The minimum number of connections needed for a single SPI device is\nfour &#8211; 3 connections for the transferring, receiving, and synchronizing data,\nand 1 connection for identification when controlling multiple devices. This\nsingle connection is called the Chip Select and Raspberry Pi has currently 2\nChip Select pins, pins 24 and 26. That means you can only use at max 2 SPI\ndevices at the same time using your Raspberry Pi.<\/p>\n\n\n\n<p>In terms of speed, the SPI has the fastest speed compared with the other two\ninterfaces (UART and I2C) in exchange for some extra wires. Again, it all\ndepends on what device and purpose you want to install with your Raspberry Pi.<\/p>\n\n\n\n<h6>I2C Pins<\/h6>\n\n\n\n<p>I2C or Inter-Integrated Circuit allows for multi-slave control using your\nRaspberry Pi. It only uses 2 connections, (pins 3 and 5 in Raspberry Pi 3) to\ncontrol multiple slaves. You may prematurely say, &#8220;<em>hey, this is the\nbest choice to control multiple slaves so I should buy peripherals that uses\nI2C!<\/em>&#8220;. However, it is only good for lower-speed peripherals so if you\nneed a faster communication between your Raspberry Pi 3 and your chosen sensor,\nyou may want to use the SPI enabled peripherals instead.<\/p>\n\n\n\n<p>It is also appropriate to note that when the Raspberry Pi 3 is in <code>halt<\/code> or <code>shutdown<\/code> mode, you can &#8220;wake&#8221; it up by shorting\npin 5 to ground.<\/p>\n\n\n\n<h6>EEPROM Pins<\/h6>\n\n\n\n<p>These pins are reserved for I2C communication with an EEPROM (electrically\nerasable programmable read-only memory) which means you can not use them. From\nthe <a href=\"https:\/\/raspberrypi.stackexchange.com\/questions\/50348\/what-are-the-id-eeprom-pins-and-what-can-they-be-used-for\">raspberry\npi stack exchange<\/a>, EEPROM should only be used to communicate\nwith a HAT&#8217;s EEPROM. It lets Linux to automatically install required drivers\nfor the HAT to function. In other words, just don&#8217;t connect anything here.<\/p>\n\n\n\n<p>In conclusion, the GPIO header of your Raspberry Pi enables you to act as\ncontrol peripherals, act like buttons, or automated switches. Depending on your\nuse case, you may use different interfaces to fully maximize the capacity of\nyour Raspberry Pi.<\/p>\n\n\n\n<h4>Notes<\/h4>\n\n\n\n<p><a href=\"#note1\">[1]<\/a> <a href=\"https:\/\/raspberrypi.stackexchange.com\/questions\/1617\/how-do-i-supply-power-through-the-gpio\">Power\nsupply through GPIO<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>GPIOs (General-Purpose Input\/Output) are generic pins controllable by a user in execution time. You can program these pins to interact with the real world\u2014from turning an LED on and off to commanding microcontrollers such as the Arduino. In short, GPIO enables you to do physical computing. Raspberry Pi single-board computers have their own set of [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":165,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5,4],"tags":[],"_links":{"self":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts\/164"}],"collection":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/comments?post=164"}],"version-history":[{"count":4,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts\/164\/revisions"}],"predecessor-version":[{"id":414,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/posts\/164\/revisions\/414"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/media\/165"}],"wp:attachment":[{"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/media?parent=164"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/categories?post=164"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.argon40.com.br\/learn\/index.php\/wp-json\/wp\/v2\/tags?post=164"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}